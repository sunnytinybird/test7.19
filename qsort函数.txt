#define _CRT_SECURE_NO_WARNINGS 1
//冒泡排序
#include<stdio.h>
//void bubble_sort(int* arr, int sz)
//{
//	int i = 0;
//	for (i = 0;i < sz - 1;i++)//趟数
//	{
//		int j = 0;
//		int tmp = 0;
//		int count = 0;
//		for (j = 0;j < sz - 1 - i;j++)//一趟所需要的对数
//		{
//			if (arr[j] > arr[j + 1])
//			{
//				tmp = arr[j];
//				arr[j] = arr[j + 1];
//				arr[j + 1] = tmp;
//				count++;
//			}
//		}
//		if (count == 0)//若一趟中未执行对数互换，则已排好序
//		{
//			break;
//		}
//	}
//}
//int main()
//{
//	int arr[] = { 9,8,7,5,4,4,3,2,1,0 };
//	int sz = sizeof arr / sizeof arr[0];
//	bubble_sort(arr, sz);
//	int i = 0;
//	for (i = 0;i < sz;i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}
//qsort函数的用法，整型，浮点数，结构体整型，结构体字符
#include<stdlib.h>
int cmp_int(const void*e1, const void*e2)
{
	return *(int*)e1 - *(int*)e2;
}

void test1()
{
	int arr[] = { 9,8,7,6,5,4,3,2,1 ,0 };
	int sz, i;
	sz = sizeof arr / sizeof arr[0];
	qsort(arr, sz, sizeof(arr[0]), cmp_int);
	for (i = 0;i < sz;i++)
	{
		printf("%d ", arr[i]);
	}printf("\n");
}

int cmp_float(const void* e1, const void* e2)//！！！！compare函数返回的是0或1或-1，是int类型的。
{
	return *(float*)e1 - *(float*)e2;
}

 void test2()
{
	float arr[] = { 6.0,5.0,4.0,3.0,2.0,1.0 };
	int sz, i;
	sz = sizeof arr / sizeof arr[0];
	qsort(arr, sz, sizeof(arr[0]), cmp_float);
	for (i = 0;i < sz;i++)
	{
		printf("%f ", arr[i]);
	}printf("\n");
}

 
int main()
{
	test1();
	test2();
	
	return 0;
}